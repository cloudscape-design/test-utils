// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`index files > dom index file matches the snapshot 1`] = `
"
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { ElementWrapper } from '@cloudscape-design/test-utils-core/dom';
import { appendSelector } from '@cloudscape-design/test-utils-core/utils';

type Comparator = string | RegExp | ((name: string) => boolean);
type Selector =
  | string
  | {
      name?: Comparator;
      description?: Comparator;
      textContent?: Comparator;
    };

export { ElementWrapper };

import TestComponentAWrapper from './test-component-a';
import TestComponentBWrapper from './test-component-b';


export { TestComponentAWrapper };
export { TestComponentBWrapper };

declare module '@cloudscape-design/test-utils-core/dist/dom' {
   interface ElementWrapper {
    
/**
 * Returns the wrapper of the first TestComponentA that matches the specified CSS selector.
 * If no CSS selector is specified, returns the wrapper of the first TestComponentA.
 * If no matching TestComponentA is found, returns \`null\`.
 *
 * @param {string} [selector] CSS Selector
 * @returns {TestComponentAWrapper | null}
 */
findTestComponentA(selector?: Selector): TestComponentAWrapper | null;

/**
 * Returns an array of TestComponentA wrapper that matches the specified CSS selector.
 * If no CSS selector is specified, returns all of the TestComponentAs inside the current wrapper.
 * If no matching TestComponentA is found, returns an empty array.
 *
 * @param {string} [selector] CSS Selector
 * @returns {Array<TestComponentAWrapper>}
 */
findAllTestComponentAs(selector?: Selector): Array<TestComponentAWrapper>;
/**
 * Returns the wrapper of the first TestComponentB that matches the specified CSS selector.
 * If no CSS selector is specified, returns the wrapper of the first TestComponentB.
 * If no matching TestComponentB is found, returns \`null\`.
 *
 * @param {string} [selector] CSS Selector
 * @returns {TestComponentBWrapper | null}
 */
findTestComponentB(selector?: Selector): TestComponentBWrapper | null;

/**
 * Returns an array of TestComponentB wrapper that matches the specified CSS selector.
 * If no CSS selector is specified, returns all of the TestComponentBs inside the current wrapper.
 * If no matching TestComponentB is found, returns an empty array.
 *
 * @param {string} [selector] CSS Selector
 * @returns {Array<TestComponentBWrapper>}
 */
findAllTestComponentBs(selector?: Selector): Array<TestComponentBWrapper>;
   }
}


ElementWrapper.prototype.findTestComponentA = function(selector) {
  const rootSelector = \`.\${TestComponentAWrapper.rootSelector}\`;
  // casting to 'any' is needed to avoid this issue with generics
  // https://github.com/microsoft/TypeScript/issues/29132
  return (this as any).findComponent(rootSelector, TestComponentAWrapper, selector);
};

ElementWrapper.prototype.findAllTestComponentAs = function(selector) {
  return this.findAllComponents(TestComponentAWrapper, selector);
};
ElementWrapper.prototype.findTestComponentB = function(selector) {
  const rootSelector = \`.\${TestComponentBWrapper.rootSelector}\`;
  // casting to 'any' is needed to avoid this issue with generics
  // https://github.com/microsoft/TypeScript/issues/29132
  return (this as any).findComponent(rootSelector, TestComponentBWrapper, selector);
};

ElementWrapper.prototype.findAllTestComponentBs = function(selector) {
  return this.findAllComponents(TestComponentBWrapper, selector);
};


export default function wrapper(root: Element = document.body) {
  if (document && document.body && !document.body.contains(root)) {
    console.warn('[AwsUi] [test-utils] provided element is not part of the document body, interactions may work incorrectly')
  };
  return new ElementWrapper(root);
}
"
`;

exports[`index files > selectors index file matches the snapshot 1`] = `
"
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { ElementWrapper } from '@cloudscape-design/test-utils-core/selectors';
import { appendSelector } from '@cloudscape-design/test-utils-core/utils';


export { ElementWrapper };

import TestComponentAWrapper from './test-component-a';
import TestComponentBWrapper from './test-component-b';


export { TestComponentAWrapper };
export { TestComponentBWrapper };

declare module '@cloudscape-design/test-utils-core/dist/selectors' {
   interface ElementWrapper {
    
/**
 * Returns a wrapper that matches the TestComponentAs with the specified CSS selector.
 * If no CSS selector is specified, returns a wrapper that matches TestComponentAs.
 *
 * @param {string} [selector] CSS Selector
 * @returns {TestComponentAWrapper}
 */
findTestComponentA(selector?: string): TestComponentAWrapper;

/**
 * Returns a multi-element wrapper that matches TestComponentAs with the specified CSS selector.
 * If no CSS selector is specified, returns a multi-element wrapper that matches TestComponentAs.
 *
 * @param {string} [selector] CSS Selector
 * @returns {MultiElementWrapper<TestComponentAWrapper>}
 */
findAllTestComponentAs(selector?: string): MultiElementWrapper<TestComponentAWrapper>;
/**
 * Returns a wrapper that matches the TestComponentBs with the specified CSS selector.
 * If no CSS selector is specified, returns a wrapper that matches TestComponentBs.
 *
 * @param {string} [selector] CSS Selector
 * @returns {TestComponentBWrapper}
 */
findTestComponentB(selector?: string): TestComponentBWrapper;

/**
 * Returns a multi-element wrapper that matches TestComponentBs with the specified CSS selector.
 * If no CSS selector is specified, returns a multi-element wrapper that matches TestComponentBs.
 *
 * @param {string} [selector] CSS Selector
 * @returns {MultiElementWrapper<TestComponentBWrapper>}
 */
findAllTestComponentBs(selector?: string): MultiElementWrapper<TestComponentBWrapper>;
   }
}


ElementWrapper.prototype.findTestComponentA = function(selector) {
  const rootSelector = \`.\${TestComponentAWrapper.rootSelector}\`;
  // casting to 'any' is needed to avoid this issue with generics
  // https://github.com/microsoft/TypeScript/issues/29132
  return (this as any).findComponent(rootSelector, TestComponentAWrapper, selector);
};

ElementWrapper.prototype.findAllTestComponentAs = function(selector) {
  return this.findAllComponents(TestComponentAWrapper, selector);
};
ElementWrapper.prototype.findTestComponentB = function(selector) {
  const rootSelector = \`.\${TestComponentBWrapper.rootSelector}\`;
  // casting to 'any' is needed to avoid this issue with generics
  // https://github.com/microsoft/TypeScript/issues/29132
  return (this as any).findComponent(rootSelector, TestComponentBWrapper, selector);
};

ElementWrapper.prototype.findAllTestComponentBs = function(selector) {
  return this.findAllComponents(TestComponentBWrapper, selector);
};


export default function wrapper(root: string = 'body') {
  return new ElementWrapper(root);
}
"
`;
