// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`documenter output > dom 1`] = `
{
  "classes": [
    {
      "methods": [
        {
          "name": "blur",
          "parameters": [],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "description": "Performs a click by triggering a mouse event.
Note that programmatic events ignore disabled attribute and will trigger listeners even if the element is disabled.",
          "name": "click",
          "parameters": [
            {
              "flags": {
                "isOptional": true,
              },
              "name": "params",
              "typeName": "MouseEventInit",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "name": "find",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": true,
            "name": "ElementWrapper",
            "typeArguments": [
              {
                "name": "NewElementType",
              },
            ],
          },
        },
        {
          "name": "findAll",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "Array",
            "typeArguments": [
              {
                "name": "ElementWrapper<NewElementType>",
              },
            ],
          },
        },
        {
          "name": "findAllByClassName",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "className",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "Array",
            "typeArguments": [
              {
                "name": "ElementWrapper<NewElementType>",
              },
            ],
          },
        },
        {
          "description": "Returns the wrappers of all components that match the specified component type and the specified CSS selector.
If no CSS selector is specified, returns all of the components that match the specified component type.
If no matching component is found, returns an empty array.",
          "name": "findAllComponents",
          "parameters": [
            {
              "description": "Component's wrapper class",
              "flags": {
                "isOptional": false,
              },
              "name": "ComponentClass",
              "typeName": "ComponentWrapperClass<Wrapper, ElementType>",
            },
            {
              "description": "CSS selector",
              "flags": {
                "isOptional": true,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "Array",
            "typeArguments": [
              {
                "name": "Wrapper",
              },
            ],
          },
        },
        {
          "name": "findAny",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selectors",
              "typeName": "Array<string>",
            },
          ],
          "returnType": {
            "isNullable": true,
            "name": "ElementWrapper",
            "typeArguments": [
              {
                "name": "NewElementType",
              },
            ],
          },
        },
        {
          "name": "findByClassName",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "className",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": true,
            "name": "ElementWrapper",
            "typeArguments": [
              {
                "name": "NewElementType",
              },
            ],
          },
        },
        {
          "description": "Returns the component wrapper matching the specified selector.
If the specified selector doesn't match any element, it returns \`null\`.

Note: This function returns the specified component's wrapper even if the specified selector points to a different component type.",
          "name": "findComponent",
          "parameters": [
            {
              "description": "CSS selector",
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
            {
              "description": "Component's wrapper class",
              "flags": {
                "isOptional": false,
              },
              "name": "ComponentClass",
              "typeName": "WrapperClass<Wrapper, ElementType>",
            },
          ],
          "returnType": {
            "isNullable": true,
            "name": "Wrapper",
          },
        },
        {
          "name": "fireEvent",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "event",
              "typeName": "Event",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "name": "focus",
          "parameters": [],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "name": "getElement",
          "parameters": [],
          "returnType": {
            "isNullable": false,
            "name": "ElementType",
          },
        },
        {
          "name": "keydown",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "keyCode",
              "typeName": "KeyCode",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "name": "keydown",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "keyboardEventProps",
              "typeName": "KeyboardEventInit",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "name": "keypress",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "keyCode",
              "typeName": "KeyCode",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "name": "keyup",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "keyCode",
              "typeName": "KeyCode",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "name": "matches",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": true,
            "name": "this",
          },
        },
      ],
      "name": "AbstractWrapper",
    },
    {
      "methods": [
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.blur",
          },
          "name": "blur",
          "parameters": [],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "description": "Performs a click by triggering a mouse event.
Note that programmatic events ignore disabled attribute and will trigger listeners even if the element is disabled.",
          "inheritedFrom": {
            "name": "AbstractWrapper.click",
          },
          "name": "click",
          "parameters": [
            {
              "flags": {
                "isOptional": true,
              },
              "name": "params",
              "typeName": "MouseEventInit",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.find",
          },
          "name": "find",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": true,
            "name": "ElementWrapper",
            "typeArguments": [
              {
                "name": "NewElementType",
              },
            ],
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.findAll",
          },
          "name": "findAll",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "Array",
            "typeArguments": [
              {
                "name": "ElementWrapper<NewElementType>",
              },
            ],
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.findAllByClassName",
          },
          "name": "findAllByClassName",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "className",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "Array",
            "typeArguments": [
              {
                "name": "ElementWrapper<NewElementType>",
              },
            ],
          },
        },
        {
          "description": "Returns the wrappers of all components that match the specified component type and the specified CSS selector.
If no CSS selector is specified, returns all of the components that match the specified component type.
If no matching component is found, returns an empty array.",
          "inheritedFrom": {
            "name": "AbstractWrapper.findAllComponents",
          },
          "name": "findAllComponents",
          "parameters": [
            {
              "description": "Component's wrapper class",
              "flags": {
                "isOptional": false,
              },
              "name": "ComponentClass",
              "typeName": "ComponentWrapperClass<Wrapper, ElementType>",
            },
            {
              "description": "CSS selector",
              "flags": {
                "isOptional": true,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "Array",
            "typeArguments": [
              {
                "name": "Wrapper",
              },
            ],
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.findAny",
          },
          "name": "findAny",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selectors",
              "typeName": "Array<string>",
            },
          ],
          "returnType": {
            "isNullable": true,
            "name": "ElementWrapper",
            "typeArguments": [
              {
                "name": "NewElementType",
              },
            ],
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.findByClassName",
          },
          "name": "findByClassName",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "className",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": true,
            "name": "ElementWrapper",
            "typeArguments": [
              {
                "name": "NewElementType",
              },
            ],
          },
        },
        {
          "description": "Returns the component wrapper matching the specified selector.
If the specified selector doesn't match any element, it returns \`null\`.

Note: This function returns the specified component's wrapper even if the specified selector points to a different component type.",
          "inheritedFrom": {
            "name": "AbstractWrapper.findComponent",
          },
          "name": "findComponent",
          "parameters": [
            {
              "description": "CSS selector",
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
            {
              "description": "Component's wrapper class",
              "flags": {
                "isOptional": false,
              },
              "name": "ComponentClass",
              "typeName": "WrapperClass<Wrapper, ElementType>",
            },
          ],
          "returnType": {
            "isNullable": true,
            "name": "Wrapper",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.fireEvent",
          },
          "name": "fireEvent",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "event",
              "typeName": "Event",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.focus",
          },
          "name": "focus",
          "parameters": [],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.getElement",
          },
          "name": "getElement",
          "parameters": [],
          "returnType": {
            "isNullable": false,
            "name": "ElementType",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.keydown",
          },
          "name": "keydown",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "keyCode",
              "typeName": "KeyCode",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.keydown",
          },
          "name": "keydown",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "keyboardEventProps",
              "typeName": "KeyboardEventInit",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.keypress",
          },
          "name": "keypress",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "keyCode",
              "typeName": "KeyCode",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.keyup",
          },
          "name": "keyup",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "keyCode",
              "typeName": "KeyCode",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.matches",
          },
          "name": "matches",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": true,
            "name": "this",
          },
        },
      ],
      "name": "ElementWrapper",
    },
    {
      "methods": [
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.blur",
          },
          "name": "blur",
          "parameters": [],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "description": "Performs a click by triggering a mouse event.
Note that programmatic events ignore disabled attribute and will trigger listeners even if the element is disabled.",
          "inheritedFrom": {
            "name": "AbstractWrapper.click",
          },
          "name": "click",
          "parameters": [
            {
              "flags": {
                "isOptional": true,
              },
              "name": "params",
              "typeName": "MouseEventInit",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.find",
          },
          "name": "find",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": true,
            "name": "ElementWrapper",
            "typeArguments": [
              {
                "name": "NewElementType",
              },
            ],
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.findAll",
          },
          "name": "findAll",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "Array",
            "typeArguments": [
              {
                "name": "ElementWrapper<NewElementType>",
              },
            ],
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.findAllByClassName",
          },
          "name": "findAllByClassName",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "className",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "Array",
            "typeArguments": [
              {
                "name": "ElementWrapper<NewElementType>",
              },
            ],
          },
        },
        {
          "description": "Returns the wrappers of all components that match the specified component type and the specified CSS selector.
If no CSS selector is specified, returns all of the components that match the specified component type.
If no matching component is found, returns an empty array.",
          "inheritedFrom": {
            "name": "AbstractWrapper.findAllComponents",
          },
          "name": "findAllComponents",
          "parameters": [
            {
              "description": "Component's wrapper class",
              "flags": {
                "isOptional": false,
              },
              "name": "ComponentClass",
              "typeName": "ComponentWrapperClass<Wrapper, ElementType>",
            },
            {
              "description": "CSS selector",
              "flags": {
                "isOptional": true,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "Array",
            "typeArguments": [
              {
                "name": "Wrapper",
              },
            ],
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.findAny",
          },
          "name": "findAny",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selectors",
              "typeName": "Array<string>",
            },
          ],
          "returnType": {
            "isNullable": true,
            "name": "ElementWrapper",
            "typeArguments": [
              {
                "name": "NewElementType",
              },
            ],
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.findByClassName",
          },
          "name": "findByClassName",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "className",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": true,
            "name": "ElementWrapper",
            "typeArguments": [
              {
                "name": "NewElementType",
              },
            ],
          },
        },
        {
          "description": "Returns the component wrapper matching the specified selector.
If the specified selector doesn't match any element, it returns \`null\`.

Note: This function returns the specified component's wrapper even if the specified selector points to a different component type.",
          "inheritedFrom": {
            "name": "AbstractWrapper.findComponent",
          },
          "name": "findComponent",
          "parameters": [
            {
              "description": "CSS selector",
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
            {
              "description": "Component's wrapper class",
              "flags": {
                "isOptional": false,
              },
              "name": "ComponentClass",
              "typeName": "WrapperClass<Wrapper, ElementType>",
            },
          ],
          "returnType": {
            "isNullable": true,
            "name": "Wrapper",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.fireEvent",
          },
          "name": "fireEvent",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "event",
              "typeName": "Event",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.focus",
          },
          "name": "focus",
          "parameters": [],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.getElement",
          },
          "name": "getElement",
          "parameters": [],
          "returnType": {
            "isNullable": false,
            "name": "ElementType",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.keydown",
          },
          "name": "keydown",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "keyCode",
              "typeName": "KeyCode",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.keydown",
          },
          "name": "keydown",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "keyboardEventProps",
              "typeName": "KeyboardEventInit",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.keypress",
          },
          "name": "keypress",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "keyCode",
              "typeName": "KeyCode",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.keyup",
          },
          "name": "keyup",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "keyCode",
              "typeName": "KeyCode",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "void",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.matches",
          },
          "name": "matches",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": true,
            "name": "this",
          },
        },
      ],
      "name": "ComponentWrapper",
    },
  ],
}
`;

exports[`documenter output > selectors 1`] = `
{
  "classes": [
    {
      "methods": [
        {
          "name": "find",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "ElementWrapper",
          },
        },
        {
          "name": "findAll",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "MultiElementWrapper",
            "typeArguments": [
              {
                "name": "ElementWrapper",
              },
            ],
          },
        },
        {
          "name": "findAllByClassName",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "className",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "MultiElementWrapper",
            "typeArguments": [
              {
                "name": "ElementWrapper",
              },
            ],
          },
        },
        {
          "description": "Returns a multi-element wrapper that matches the specified component type with the specified CSS selector.
If no CSS selector is specified, returns a multi-element wrapper that matches the specified component type.",
          "name": "findAllComponents",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "ComponentClass",
              "typeName": "ComponentWrapperClass<Wrapper>",
            },
            {
              "description": "CSS Selector",
              "flags": {
                "isOptional": true,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "MultiElementWrapper",
            "typeArguments": [
              {
                "name": "Wrapper",
              },
            ],
          },
        },
        {
          "name": "findAny",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selectors",
              "typeName": "Array<string>",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "ElementWrapper",
          },
        },
        {
          "name": "findByClassName",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "className",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "ElementWrapper",
          },
        },
        {
          "description": "Returns a wrapper that matches the specified component type with the specified CSS selector.

Note: This function returns the specified component's wrapper even if the specified selector points to a different component type.",
          "name": "findComponent",
          "parameters": [
            {
              "description": "CSS selector",
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
            {
              "description": "Component's wrapper class",
              "flags": {
                "isOptional": false,
              },
              "name": "ComponentClass",
              "typeName": "WrapperClass<Wrapper>",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "Wrapper",
          },
        },
        {
          "name": "getElement",
          "parameters": [],
          "returnType": {
            "isNullable": false,
            "name": "string",
          },
        },
        {
          "name": "matches",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "ElementWrapper",
          },
        },
        {
          "name": "toSelector",
          "parameters": [],
          "returnType": {
            "isNullable": false,
            "name": "string",
          },
        },
      ],
      "name": "AbstractWrapper",
    },
    {
      "methods": [
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.find",
          },
          "name": "find",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "ElementWrapper",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.findAll",
          },
          "name": "findAll",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "MultiElementWrapper",
            "typeArguments": [
              {
                "name": "ElementWrapper",
              },
            ],
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.findAllByClassName",
          },
          "name": "findAllByClassName",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "className",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "MultiElementWrapper",
            "typeArguments": [
              {
                "name": "ElementWrapper",
              },
            ],
          },
        },
        {
          "description": "Returns a multi-element wrapper that matches the specified component type with the specified CSS selector.
If no CSS selector is specified, returns a multi-element wrapper that matches the specified component type.",
          "inheritedFrom": {
            "name": "AbstractWrapper.findAllComponents",
          },
          "name": "findAllComponents",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "ComponentClass",
              "typeName": "ComponentWrapperClass<Wrapper>",
            },
            {
              "description": "CSS Selector",
              "flags": {
                "isOptional": true,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "MultiElementWrapper",
            "typeArguments": [
              {
                "name": "Wrapper",
              },
            ],
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.findAny",
          },
          "name": "findAny",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selectors",
              "typeName": "Array<string>",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "ElementWrapper",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.findByClassName",
          },
          "name": "findByClassName",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "className",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "ElementWrapper",
          },
        },
        {
          "description": "Returns a wrapper that matches the specified component type with the specified CSS selector.

Note: This function returns the specified component's wrapper even if the specified selector points to a different component type.",
          "inheritedFrom": {
            "name": "AbstractWrapper.findComponent",
          },
          "name": "findComponent",
          "parameters": [
            {
              "description": "CSS selector",
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
            {
              "description": "Component's wrapper class",
              "flags": {
                "isOptional": false,
              },
              "name": "ComponentClass",
              "typeName": "WrapperClass<Wrapper>",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "Wrapper",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.getElement",
          },
          "name": "getElement",
          "parameters": [],
          "returnType": {
            "isNullable": false,
            "name": "string",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.matches",
          },
          "name": "matches",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "ElementWrapper",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.toSelector",
          },
          "name": "toSelector",
          "parameters": [],
          "returnType": {
            "isNullable": false,
            "name": "string",
          },
        },
      ],
      "name": "ElementWrapper",
    },
    {
      "methods": [
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.find",
          },
          "name": "find",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "ElementWrapper",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.findAll",
          },
          "name": "findAll",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "MultiElementWrapper",
            "typeArguments": [
              {
                "name": "ElementWrapper",
              },
            ],
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.findAllByClassName",
          },
          "name": "findAllByClassName",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "className",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "MultiElementWrapper",
            "typeArguments": [
              {
                "name": "ElementWrapper",
              },
            ],
          },
        },
        {
          "description": "Returns a multi-element wrapper that matches the specified component type with the specified CSS selector.
If no CSS selector is specified, returns a multi-element wrapper that matches the specified component type.",
          "inheritedFrom": {
            "name": "AbstractWrapper.findAllComponents",
          },
          "name": "findAllComponents",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "ComponentClass",
              "typeName": "ComponentWrapperClass<Wrapper>",
            },
            {
              "description": "CSS Selector",
              "flags": {
                "isOptional": true,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "MultiElementWrapper",
            "typeArguments": [
              {
                "name": "Wrapper",
              },
            ],
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.findAny",
          },
          "name": "findAny",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selectors",
              "typeName": "Array<string>",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "ElementWrapper",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.findByClassName",
          },
          "name": "findByClassName",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "className",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "ElementWrapper",
          },
        },
        {
          "description": "Returns a wrapper that matches the specified component type with the specified CSS selector.

Note: This function returns the specified component's wrapper even if the specified selector points to a different component type.",
          "inheritedFrom": {
            "name": "AbstractWrapper.findComponent",
          },
          "name": "findComponent",
          "parameters": [
            {
              "description": "CSS selector",
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
            {
              "description": "Component's wrapper class",
              "flags": {
                "isOptional": false,
              },
              "name": "ComponentClass",
              "typeName": "WrapperClass<Wrapper>",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "Wrapper",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.getElement",
          },
          "name": "getElement",
          "parameters": [],
          "returnType": {
            "isNullable": false,
            "name": "string",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.matches",
          },
          "name": "matches",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "ElementWrapper",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.toSelector",
          },
          "name": "toSelector",
          "parameters": [],
          "returnType": {
            "isNullable": false,
            "name": "string",
          },
        },
      ],
      "name": "ComponentWrapper",
    },
    {
      "methods": [
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.find",
          },
          "name": "find",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "ElementWrapper",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.findAll",
          },
          "name": "findAll",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "MultiElementWrapper",
            "typeArguments": [
              {
                "name": "ElementWrapper",
              },
            ],
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.findAllByClassName",
          },
          "name": "findAllByClassName",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "className",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "MultiElementWrapper",
            "typeArguments": [
              {
                "name": "ElementWrapper",
              },
            ],
          },
        },
        {
          "description": "Returns a multi-element wrapper that matches the specified component type with the specified CSS selector.
If no CSS selector is specified, returns a multi-element wrapper that matches the specified component type.",
          "inheritedFrom": {
            "name": "AbstractWrapper.findAllComponents",
          },
          "name": "findAllComponents",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "ComponentClass",
              "typeName": "ComponentWrapperClass<Wrapper>",
            },
            {
              "description": "CSS Selector",
              "flags": {
                "isOptional": true,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "MultiElementWrapper",
            "typeArguments": [
              {
                "name": "Wrapper",
              },
            ],
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.findAny",
          },
          "name": "findAny",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selectors",
              "typeName": "Array<string>",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "ElementWrapper",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.findByClassName",
          },
          "name": "findByClassName",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "className",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "ElementWrapper",
          },
        },
        {
          "description": "Returns a wrapper that matches the specified component type with the specified CSS selector.

Note: This function returns the specified component's wrapper even if the specified selector points to a different component type.",
          "inheritedFrom": {
            "name": "AbstractWrapper.findComponent",
          },
          "name": "findComponent",
          "parameters": [
            {
              "description": "CSS selector",
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
            {
              "description": "Component's wrapper class",
              "flags": {
                "isOptional": false,
              },
              "name": "ComponentClass",
              "typeName": "WrapperClass<Wrapper>",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "Wrapper",
          },
        },
        {
          "description": "Index is one-based because the method uses the :nth-child() CSS pseudo-class.",
          "name": "get",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "index",
              "typeName": "number",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "T",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.getElement",
          },
          "name": "getElement",
          "parameters": [],
          "returnType": {
            "isNullable": false,
            "name": "string",
          },
        },
        {
          "name": "map",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "factory",
              "typeName": "(wrapper: ElementWrapper) => T",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "MultiElementWrapper",
            "typeArguments": [
              {
                "name": "T",
              },
            ],
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.matches",
          },
          "name": "matches",
          "parameters": [
            {
              "flags": {
                "isOptional": false,
              },
              "name": "selector",
              "typeName": "string",
            },
          ],
          "returnType": {
            "isNullable": false,
            "name": "ElementWrapper",
          },
        },
        {
          "inheritedFrom": {
            "name": "AbstractWrapper.toSelector",
          },
          "name": "toSelector",
          "parameters": [],
          "returnType": {
            "isNullable": false,
            "name": "string",
          },
        },
      ],
      "name": "MultiElementWrapper",
    },
  ],
}
`;
